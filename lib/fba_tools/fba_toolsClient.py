# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport
import time


class fba_tools(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login',
            service_ver='release',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def _check_job(self, job_id):
        return self._client._check_job('fba_tools', job_id)

    def _build_metabolic_model_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.build_metabolic_model', [params],
             self._service_ver, context)

    def build_metabolic_model(self, params, context=None):
        """
        Build a genome-scale metabolic model based on annotations in an input genome typed object
        :param params: instance of type "BuildMetabolicModelParams" ->
           structure: parameter "genome_id" of type "genome_id" (A string
           representing a Genome id.), parameter "genome_workspace" of type
           "workspace_name" (A string representing a workspace name.),
           parameter "media_id" of type "media_id" (A string representing a
           Media id.), parameter "media_workspace" of type "workspace_name"
           (A string representing a workspace name.), parameter
           "fbamodel_output_id" of type "fbamodel_id" (A string representing
           a FBAModel id.), parameter "workspace" of type "workspace_name" (A
           string representing a workspace name.), parameter "template_id" of
           type "template_id" (A string representing a NewModelTemplate id.),
           parameter "template_workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "coremodel" of type
           "bool" (A binary boolean), parameter "gapfill_model" of type
           "bool" (A binary boolean), parameter "thermodynamic_constraints"
           of type "bool" (A binary boolean), parameter
           "comprehensive_gapfill" of type "bool" (A binary boolean),
           parameter "custom_bound_list" of list of String, parameter
           "media_supplement_list" of list of type "compound_id" (A string
           representing a compound id.), parameter "expseries_id" of type
           "expseries_id" (A string representing an expression matrix id.),
           parameter "expseries_workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "expression_condition"
           of String, parameter "exp_threshold_percentile" of Double,
           parameter "exp_threshold_margin" of Double, parameter
           "activation_coefficient" of Double, parameter "omega" of Double,
           parameter "objective_fraction" of Double, parameter
           "minimum_target_flux" of Double, parameter "number_of_solutions"
           of Long
        :returns: instance of type "BuildMetabolicModelResults" -> structure:
           parameter "new_fbamodel_ref" of type "ws_fbamodel_id" (The
           workspace ID for a FBAModel data object. @id ws
           KBaseFBA.FBAModel), parameter "new_fba_ref" of type "ws_fba_id"
           (The workspace ID for a FBA data object. @id ws KBaseFBA.FBA),
           parameter "number_gapfilled_reactions" of Long, parameter
           "number_removed_biomass_compounds" of Long
        """
        job_id = self._build_metabolic_model_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _build_multiple_metabolic_models_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.build_multiple_metabolic_models', [params],
             self._service_ver, context)

    def build_multiple_metabolic_models(self, params, context=None):
        """
        Build multiple genome-scale metabolic models based on annotations in an input genome typed object
        :param params: instance of type "BuildMultipleMetabolicModelsParams"
           -> structure: parameter "genome_ids" of list of type "genome_id"
           (A string representing a Genome id.), parameter "genome_text" of
           String, parameter "genome_workspace" of type "workspace_name" (A
           string representing a workspace name.), parameter "media_id" of
           type "media_id" (A string representing a Media id.), parameter
           "media_workspace" of type "workspace_name" (A string representing
           a workspace name.), parameter "fbamodel_output_id" of type
           "fbamodel_id" (A string representing a FBAModel id.), parameter
           "workspace" of type "workspace_name" (A string representing a
           workspace name.), parameter "template_id" of type "template_id" (A
           string representing a NewModelTemplate id.), parameter
           "template_workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "coremodel" of type
           "bool" (A binary boolean), parameter "gapfill_model" of type
           "bool" (A binary boolean), parameter "thermodynamic_constraints"
           of type "bool" (A binary boolean), parameter
           "comprehensive_gapfill" of type "bool" (A binary boolean),
           parameter "custom_bound_list" of list of String, parameter
           "media_supplement_list" of list of type "compound_id" (A string
           representing a compound id.), parameter "expseries_id" of type
           "expseries_id" (A string representing an expression matrix id.),
           parameter "expseries_workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "expression_condition"
           of String, parameter "exp_threshold_percentile" of Double,
           parameter "exp_threshold_margin" of Double, parameter
           "activation_coefficient" of Double, parameter "omega" of Double,
           parameter "objective_fraction" of Double, parameter
           "minimum_target_flux" of Double, parameter "number_of_solutions"
           of Long
        :returns: instance of type "BuildMultipleMetabolicModelsResults" ->
           structure: parameter "new_fbamodel_ref" of type "ws_fbamodel_id"
           (The workspace ID for a FBAModel data object. @id ws
           KBaseFBA.FBAModel), parameter "new_fba_ref" of type "ws_fba_id"
           (The workspace ID for a FBA data object. @id ws KBaseFBA.FBA)
        """
        job_id = self._build_multiple_metabolic_models_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _gapfill_metabolic_model_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.gapfill_metabolic_model', [params],
             self._service_ver, context)

    def gapfill_metabolic_model(self, params, context=None):
        """
        Gapfills a metabolic model to induce flux in a specified reaction
        :param params: instance of type "GapfillMetabolicModelParams" ->
           structure: parameter "fbamodel_id" of type "fbamodel_id" (A string
           representing a FBAModel id.), parameter "fbamodel_workspace" of
           type "workspace_name" (A string representing a workspace name.),
           parameter "media_id" of type "media_id" (A string representing a
           Media id.), parameter "media_workspace" of type "workspace_name"
           (A string representing a workspace name.), parameter
           "target_reaction" of type "reaction_id" (A string representing a
           reaction id.), parameter "fbamodel_output_id" of type
           "fbamodel_id" (A string representing a FBAModel id.), parameter
           "workspace" of type "workspace_name" (A string representing a
           workspace name.), parameter "thermodynamic_constraints" of type
           "bool" (A binary boolean), parameter "comprehensive_gapfill" of
           type "bool" (A binary boolean), parameter "source_fbamodel_id" of
           type "fbamodel_id" (A string representing a FBAModel id.),
           parameter "source_fbamodel_workspace" of type "workspace_name" (A
           string representing a workspace name.), parameter
           "feature_ko_list" of list of type "feature_id" (A string
           representing a feature id.), parameter "reaction_ko_list" of list
           of type "reaction_id" (A string representing a reaction id.),
           parameter "custom_bound_list" of list of String, parameter
           "media_supplement_list" of list of type "compound_id" (A string
           representing a compound id.), parameter "expseries_id" of type
           "expseries_id" (A string representing an expression matrix id.),
           parameter "expseries_workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "expression_condition"
           of String, parameter "exp_threshold_percentile" of Double,
           parameter "exp_threshold_margin" of Double, parameter
           "activation_coefficient" of Double, parameter "omega" of Double,
           parameter "objective_fraction" of Double, parameter
           "minimum_target_flux" of Double, parameter "number_of_solutions"
           of Long
        :returns: instance of type "GapfillMetabolicModelResults" ->
           structure: parameter "new_fbamodel_ref" of type "ws_fbamodel_id"
           (The workspace ID for a FBAModel data object. @id ws
           KBaseFBA.FBAModel), parameter "new_fba_ref" of type "ws_fba_id"
           (The workspace ID for a FBA data object. @id ws KBaseFBA.FBA),
           parameter "number_gapfilled_reactions" of Long, parameter
           "number_removed_biomass_compounds" of Long
        """
        job_id = self._gapfill_metabolic_model_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _run_flux_balance_analysis_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.run_flux_balance_analysis', [params],
             self._service_ver, context)

    def run_flux_balance_analysis(self, params, context=None):
        """
        Run flux balance analysis and return ID of FBA object with results
        :param params: instance of type "RunFluxBalanceAnalysisParams" ->
           structure: parameter "fbamodel_id" of type "fbamodel_id" (A string
           representing a FBAModel id.), parameter "fbamodel_workspace" of
           type "workspace_name" (A string representing a workspace name.),
           parameter "media_id" of type "media_id" (A string representing a
           Media id.), parameter "media_workspace" of type "workspace_name"
           (A string representing a workspace name.), parameter
           "target_reaction" of type "reaction_id" (A string representing a
           reaction id.), parameter "fba_output_id" of type "fba_id" (A
           string representing a FBA id.), parameter "workspace" of type
           "workspace_name" (A string representing a workspace name.),
           parameter "thermodynamic_constraints" of type "bool" (A binary
           boolean), parameter "fva" of type "bool" (A binary boolean),
           parameter "minimize_flux" of type "bool" (A binary boolean),
           parameter "simulate_ko" of type "bool" (A binary boolean),
           parameter "find_min_media" of type "bool" (A binary boolean),
           parameter "all_reversible" of type "bool" (A binary boolean),
           parameter "feature_ko_list" of list of type "feature_id" (A string
           representing a feature id.), parameter "reaction_ko_list" of list
           of type "reaction_id" (A string representing a reaction id.),
           parameter "custom_bound_list" of list of String, parameter
           "media_supplement_list" of list of type "compound_id" (A string
           representing a compound id.), parameter "expseries_id" of type
           "expseries_id" (A string representing an expression matrix id.),
           parameter "expseries_workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "expression_condition"
           of String, parameter "exp_threshold_percentile" of Double,
           parameter "exp_threshold_margin" of Double, parameter
           "activation_coefficient" of Double, parameter "omega" of Double,
           parameter "objective_fraction" of Double, parameter "max_c_uptake"
           of Double, parameter "max_n_uptake" of Double, parameter
           "max_p_uptake" of Double, parameter "max_s_uptake" of Double,
           parameter "max_o_uptake" of Double, parameter "default_max_uptake"
           of Double, parameter "notes" of String, parameter "massbalance" of
           String
        :returns: instance of type "RunFluxBalanceAnalysisResults" ->
           structure: parameter "new_fba_ref" of type "ws_fba_id" (The
           workspace ID for a FBA data object. @id ws KBaseFBA.FBA),
           parameter "objective" of Long, parameter "report_name" of String,
           parameter "report_ref" of type "ws_report_id" (The workspace ID
           for a Report object @id ws KBaseReport.Report)
        """
        job_id = self._run_flux_balance_analysis_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _compare_fba_solutions_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.compare_fba_solutions', [params],
             self._service_ver, context)

    def compare_fba_solutions(self, params, context=None):
        """
        Compares multiple FBA solutions and saves comparison as a new object in the workspace
        :param params: instance of type "CompareFBASolutionsParams" ->
           structure: parameter "fba_id_list" of list of type "fba_id" (A
           string representing a FBA id.), parameter "fba_workspace" of type
           "workspace_name" (A string representing a workspace name.),
           parameter "fbacomparison_output_id" of type "fbacomparison_id" (A
           string representing a FBA comparison id.), parameter "workspace"
           of type "workspace_name" (A string representing a workspace name.)
        :returns: instance of type "CompareFBASolutionsResults" -> structure:
           parameter "new_fbacomparison_ref" of type "ws_fbacomparison_id"
           (The workspace ID for a FBA data object. @id ws KBaseFBA.FBA)
        """
        job_id = self._compare_fba_solutions_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _propagate_model_to_new_genome_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.propagate_model_to_new_genome', [params],
             self._service_ver, context)

    def propagate_model_to_new_genome(self, params, context=None):
        """
        Translate the metabolic model of one organism to another, using a mapping of similar proteins between their genomes
        :param params: instance of type "PropagateModelToNewGenomeParams" ->
           structure: parameter "fbamodel_id" of type "fbamodel_id" (A string
           representing a FBAModel id.), parameter "fbamodel_workspace" of
           type "workspace_name" (A string representing a workspace name.),
           parameter "proteincomparison_id" of type "proteincomparison_id" (A
           string representing a protein comparison id.), parameter
           "proteincomparison_workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "fbamodel_output_id" of
           type "fbamodel_id" (A string representing a FBAModel id.),
           parameter "workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "keep_nogene_rxn" of
           type "bool" (A binary boolean), parameter "gapfill_model" of type
           "bool" (A binary boolean), parameter "media_id" of type "media_id"
           (A string representing a Media id.), parameter "media_workspace"
           of type "workspace_name" (A string representing a workspace
           name.), parameter "thermodynamic_constraints" of type "bool" (A
           binary boolean), parameter "comprehensive_gapfill" of type "bool"
           (A binary boolean), parameter "custom_bound_list" of list of
           String, parameter "media_supplement_list" of list of type
           "compound_id" (A string representing a compound id.), parameter
           "expseries_id" of type "expseries_id" (A string representing an
           expression matrix id.), parameter "expseries_workspace" of type
           "workspace_name" (A string representing a workspace name.),
           parameter "expression_condition" of String, parameter
           "exp_threshold_percentile" of Double, parameter
           "exp_threshold_margin" of Double, parameter
           "activation_coefficient" of Double, parameter "omega" of Double,
           parameter "objective_fraction" of Double, parameter
           "minimum_target_flux" of Double, parameter "number_of_solutions"
           of Long
        :returns: instance of type "PropagateModelToNewGenomeResults" ->
           structure: parameter "new_fbamodel_ref" of type "ws_fbamodel_id"
           (The workspace ID for a FBAModel data object. @id ws
           KBaseFBA.FBAModel), parameter "new_fba_ref" of type "ws_fba_id"
           (The workspace ID for a FBA data object. @id ws KBaseFBA.FBA),
           parameter "number_gapfilled_reactions" of Long, parameter
           "number_removed_biomass_compounds" of Long
        """
        job_id = self._propagate_model_to_new_genome_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _simulate_growth_on_phenotype_data_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.simulate_growth_on_phenotype_data', [params],
             self._service_ver, context)

    def simulate_growth_on_phenotype_data(self, params, context=None):
        """
        Use Flux Balance Analysis (FBA) to simulate multiple growth phenotypes.
        :param params: instance of type "SimulateGrowthOnPhenotypeDataParams"
           -> structure: parameter "fbamodel_id" of type "fbamodel_id" (A
           string representing a FBAModel id.), parameter
           "fbamodel_workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "phenotypeset_id" of
           type "phenotypeset_id" (A string representing a phenotype set
           id.), parameter "phenotypeset_workspace" of type "workspace_name"
           (A string representing a workspace name.), parameter
           "phenotypesim_output_id" of type "phenotypesim_id" (A string
           representing a phenotype simulation id.), parameter "workspace" of
           type "workspace_name" (A string representing a workspace name.),
           parameter "all_reversible" of type "bool" (A binary boolean),
           parameter "feature_ko_list" of list of type "feature_id" (A string
           representing a feature id.), parameter "reaction_ko_list" of list
           of type "reaction_id" (A string representing a reaction id.),
           parameter "custom_bound_list" of list of String, parameter
           "media_supplement_list" of list of type "compound_id" (A string
           representing a compound id.)
        :returns: instance of type "SimulateGrowthOnPhenotypeDataResults" ->
           structure: parameter "new_phenotypesim_ref" of type
           "ws_phenotypesim_id" (The workspace ID for a phenotype set
           simulation object. @id ws KBasePhenotypes.PhenotypeSimulationSet)
        """
        job_id = self._simulate_growth_on_phenotype_data_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _merge_metabolic_models_into_community_model_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.merge_metabolic_models_into_community_model', [params],
             self._service_ver, context)

    def merge_metabolic_models_into_community_model(self, params, context=None):
        """
        Merge two or more metabolic models into a compartmentalized community model
        :param params: instance of type
           "MergeMetabolicModelsIntoCommunityModelParams" -> structure:
           parameter "fbamodel_id_list" of list of type "fbamodel_id" (A
           string representing a FBAModel id.), parameter
           "fbamodel_workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "fbamodel_output_id" of
           type "fbamodel_id" (A string representing a FBAModel id.),
           parameter "workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "mixed_bag_model" of
           type "bool" (A binary boolean)
        :returns: instance of type
           "MergeMetabolicModelsIntoCommunityModelResults" -> structure:
           parameter "new_fbamodel_ref" of type "ws_fbamodel_id" (The
           workspace ID for a FBAModel data object. @id ws KBaseFBA.FBAModel)
        """
        job_id = self._merge_metabolic_models_into_community_model_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _compare_flux_with_expression_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.compare_flux_with_expression', [params],
             self._service_ver, context)

    def compare_flux_with_expression(self, params, context=None):
        """
        Merge two or more metabolic models into a compartmentalized community model
        :param params: instance of type "CompareFluxWithExpressionParams" ->
           structure: parameter "fba_id" of type "fba_id" (A string
           representing a FBA id.), parameter "fba_workspace" of type
           "workspace_name" (A string representing a workspace name.),
           parameter "expseries_id" of type "expseries_id" (A string
           representing an expression matrix id.), parameter
           "expseries_workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "expression_condition"
           of String, parameter "exp_threshold_percentile" of Double,
           parameter "estimate_threshold" of type "bool" (A binary boolean),
           parameter "maximize_agreement" of type "bool" (A binary boolean),
           parameter "fbapathwayanalysis_output_id" of type
           "fbapathwayanalysis_id" (A string representing a
           FBAPathwayAnalysis id.), parameter "workspace" of type
           "workspace_name" (A string representing a workspace name.)
        :returns: instance of type "CompareFluxWithExpressionResults" ->
           structure: parameter "new_fbapathwayanalysis_ref" of type
           "ws_fbapathwayanalysis_id" (The workspace ID for a FBA pathway
           analysis object @id ws KBaseFBA.FBAPathwayAnalysis)
        """
        job_id = self._compare_flux_with_expression_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _check_model_mass_balance_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.check_model_mass_balance', [params],
             self._service_ver, context)

    def check_model_mass_balance(self, params, context=None):
        """
        Identifies reactions in the model that are not mass balanced
        :param params: instance of type "CheckModelMassBalanceParams" ->
           structure: parameter "fbamodel_id" of type "fbamodel_id" (A string
           representing a FBAModel id.), parameter "fbamodel_workspace" of
           type "workspace_name" (A string representing a workspace name.),
           parameter "workspace" of type "workspace_name" (A string
           representing a workspace name.)
        :returns: instance of type "CheckModelMassBalanceResults" ->
           structure: parameter "new_report_ref" of type "ws_report_id" (The
           workspace ID for a Report object @id ws KBaseReport.Report)
        """
        job_id = self._check_model_mass_balance_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _compare_models_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.compare_models', [params],
             self._service_ver, context)

    def compare_models(self, params, context=None):
        """
        Compare models
        :param params: instance of type "ModelComparisonParams"
           (ModelComparisonParams object: a list of models and optional
           pangenome and protein comparison; mc_name is the name for the new
           object. @optional protcomp_ref pangenome_ref) -> structure:
           parameter "workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "mc_name" of String,
           parameter "model_refs" of list of type "ws_fbamodel_id" (The
           workspace ID for a FBAModel data object. @id ws
           KBaseFBA.FBAModel), parameter "protcomp_ref" of type
           "ws_proteomecomparison_id" (Reference to a Proteome Comparison
           object in the workspace @id ws
           GenomeComparison.ProteomeComparison), parameter "pangenome_ref" of
           type "ws_pangenome_id" (Reference to a Pangenome object in the
           workspace @id ws KBaseGenomes.Pangenome)
        :returns: instance of type "ModelComparisonResult" -> structure:
           parameter "report_name" of String, parameter "report_ref" of type
           "ws_report_id" (The workspace ID for a Report object @id ws
           KBaseReport.Report), parameter "mc_ref" of String
        """
        job_id = self._compare_models_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _edit_metabolic_model_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.edit_metabolic_model', [params],
             self._service_ver, context)

    def edit_metabolic_model(self, params, context=None):
        """
        Edit models
        :param params: instance of type "EditMetabolicModelParams"
           (EditMetabolicModelParams object: arguments for the edit model
           function) -> structure: parameter "workspace" of type
           "workspace_name" (A string representing a workspace name.),
           parameter "fbamodel_workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "fbamodel_id" of type
           "ws_fbamodel_id" (The workspace ID for a FBAModel data object. @id
           ws KBaseFBA.FBAModel), parameter "fbamodel_output_id" of type
           "ws_fbamodel_id" (The workspace ID for a FBAModel data object. @id
           ws KBaseFBA.FBAModel), parameter "data" of mapping from String to
           list of list of String
        :returns: instance of type "EditMetabolicModelResult" -> structure:
           parameter "report_name" of String, parameter "report_ref" of type
           "ws_report_id" (The workspace ID for a Report object @id ws
           KBaseReport.Report), parameter "new_fbamodel_ref" of type
           "ws_fbamodel_id" (The workspace ID for a FBAModel data object. @id
           ws KBaseFBA.FBAModel)
        """
        job_id = self._edit_metabolic_model_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _edit_media_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.edit_media', [params],
             self._service_ver, context)

    def edit_media(self, params, context=None):
        """
        Edit models
        :param params: instance of type "EditMediaParams" (EditMediaParams
           object: arguments for the edit model function) -> structure:
           parameter "workspace" of type "workspace_name" (A string
           representing a workspace name.), parameter "media_id" of type
           "media_id" (A string representing a Media id.), parameter
           "media_workspace" of type "workspace_name" (A string representing
           a workspace name.), parameter "compounds_to_remove" of list of
           type "compound_id" (A string representing a compound id.),
           parameter "compounds_to_change" of list of tuple of size 4: type
           "compound_id" (A string representing a compound id.), parameter
           "concentration" of Double, parameter "min_flux" of Double,
           parameter "max_flux" of Double, parameter "compounds_to_add" of
           list of tuple of size 4: type "compound_id" (A string representing
           a compound id.), parameter "concentration" of Double, parameter
           "min_flux" of Double, parameter "max_flux" of Double, parameter
           "media_output_id" of type "media_id" (A string representing a
           Media id.)
        :returns: instance of type "EditMediaResult" -> structure: parameter
           "report_name" of String, parameter "report_ref" of type
           "ws_report_id" (The workspace ID for a Report object @id ws
           KBaseReport.Report), parameter "new_media_id" of type "media_id"
           (A string representing a Media id.)
        """
        job_id = self._edit_media_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _excel_file_to_model_submit(self, p, context=None):
        return self._client._submit_job(
             'fba_tools.excel_file_to_model', [p],
             self._service_ver, context)

    def excel_file_to_model(self, p, context=None):
        """
        :param p: instance of type "ModelCreationParams" (compounds_file is
           not used for excel file creations) -> structure: parameter
           "model_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "model_name" of
           String, parameter "workspace_name" of String, parameter "genome"
           of String, parameter "biomass" of list of String, parameter
           "compounds_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._excel_file_to_model_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _sbml_file_to_model_submit(self, p, context=None):
        return self._client._submit_job(
             'fba_tools.sbml_file_to_model', [p],
             self._service_ver, context)

    def sbml_file_to_model(self, p, context=None):
        """
        :param p: instance of type "ModelCreationParams" (compounds_file is
           not used for excel file creations) -> structure: parameter
           "model_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "model_name" of
           String, parameter "workspace_name" of String, parameter "genome"
           of String, parameter "biomass" of list of String, parameter
           "compounds_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._sbml_file_to_model_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _tsv_file_to_model_submit(self, p, context=None):
        return self._client._submit_job(
             'fba_tools.tsv_file_to_model', [p],
             self._service_ver, context)

    def tsv_file_to_model(self, p, context=None):
        """
        :param p: instance of type "ModelCreationParams" (compounds_file is
           not used for excel file creations) -> structure: parameter
           "model_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "model_name" of
           String, parameter "workspace_name" of String, parameter "genome"
           of String, parameter "biomass" of list of String, parameter
           "compounds_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._tsv_file_to_model_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _model_to_excel_file_submit(self, model, context=None):
        return self._client._submit_job(
             'fba_tools.model_to_excel_file', [model],
             self._service_ver, context)

    def model_to_excel_file(self, model, context=None):
        """
        :param model: instance of type "ModelObjectSelectionParams" ->
           structure: parameter "workspace_name" of String, parameter
           "model_name" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._model_to_excel_file_submit(model, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _model_to_sbml_file_submit(self, model, context=None):
        return self._client._submit_job(
             'fba_tools.model_to_sbml_file', [model],
             self._service_ver, context)

    def model_to_sbml_file(self, model, context=None):
        """
        :param model: instance of type "ModelObjectSelectionParams" ->
           structure: parameter "workspace_name" of String, parameter
           "model_name" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._model_to_sbml_file_submit(model, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _model_to_tsv_file_submit(self, model, context=None):
        return self._client._submit_job(
             'fba_tools.model_to_tsv_file', [model],
             self._service_ver, context)

    def model_to_tsv_file(self, model, context=None):
        """
        :param model: instance of type "ModelObjectSelectionParams" ->
           structure: parameter "workspace_name" of String, parameter
           "model_name" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "ModelTsvFiles" -> structure: parameter
           "compounds_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "reactions_file"
           of type "File" -> structure: parameter "path" of String, parameter
           "shock_id" of String
        """
        job_id = self._model_to_tsv_file_submit(model, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_model_as_excel_file_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.export_model_as_excel_file', [params],
             self._service_ver, context)

    def export_model_as_excel_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_model_as_excel_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_model_as_tsv_file_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.export_model_as_tsv_file', [params],
             self._service_ver, context)

    def export_model_as_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_model_as_tsv_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_model_as_sbml_file_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.export_model_as_sbml_file', [params],
             self._service_ver, context)

    def export_model_as_sbml_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_model_as_sbml_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _fba_to_excel_file_submit(self, fba, context=None):
        return self._client._submit_job(
             'fba_tools.fba_to_excel_file', [fba],
             self._service_ver, context)

    def fba_to_excel_file(self, fba, context=None):
        """
        :param fba: instance of type "FBAObjectSelectionParams" (****** FBA
           Result Converters ******) -> structure: parameter "workspace_name"
           of String, parameter "fba_name" of String, parameter
           "save_to_shock" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._fba_to_excel_file_submit(fba, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _fba_to_tsv_file_submit(self, fba, context=None):
        return self._client._submit_job(
             'fba_tools.fba_to_tsv_file', [fba],
             self._service_ver, context)

    def fba_to_tsv_file(self, fba, context=None):
        """
        :param fba: instance of type "FBAObjectSelectionParams" (****** FBA
           Result Converters ******) -> structure: parameter "workspace_name"
           of String, parameter "fba_name" of String, parameter
           "save_to_shock" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1))
        :returns: instance of type "FBATsvFiles" -> structure: parameter
           "compounds_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "reactions_file"
           of type "File" -> structure: parameter "path" of String, parameter
           "shock_id" of String
        """
        job_id = self._fba_to_tsv_file_submit(fba, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_fba_as_excel_file_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.export_fba_as_excel_file', [params],
             self._service_ver, context)

    def export_fba_as_excel_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_fba_as_excel_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_fba_as_tsv_file_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.export_fba_as_tsv_file', [params],
             self._service_ver, context)

    def export_fba_as_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_fba_as_tsv_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _tsv_file_to_media_submit(self, p, context=None):
        return self._client._submit_job(
             'fba_tools.tsv_file_to_media', [p],
             self._service_ver, context)

    def tsv_file_to_media(self, p, context=None):
        """
        :param p: instance of type "MediaCreationParams" (****** Media
           Converters *********) -> structure: parameter "media_file" of type
           "File" -> structure: parameter "path" of String, parameter
           "shock_id" of String, parameter "media_name" of String, parameter
           "workspace_name" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._tsv_file_to_media_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _excel_file_to_media_submit(self, p, context=None):
        return self._client._submit_job(
             'fba_tools.excel_file_to_media', [p],
             self._service_ver, context)

    def excel_file_to_media(self, p, context=None):
        """
        :param p: instance of type "MediaCreationParams" (****** Media
           Converters *********) -> structure: parameter "media_file" of type
           "File" -> structure: parameter "path" of String, parameter
           "shock_id" of String, parameter "media_name" of String, parameter
           "workspace_name" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._excel_file_to_media_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _media_to_tsv_file_submit(self, media, context=None):
        return self._client._submit_job(
             'fba_tools.media_to_tsv_file', [media],
             self._service_ver, context)

    def media_to_tsv_file(self, media, context=None):
        """
        :param media: instance of type "MediaObjectSelectionParams" ->
           structure: parameter "workspace_name" of String, parameter
           "media_name" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._media_to_tsv_file_submit(media, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _media_to_excel_file_submit(self, media, context=None):
        return self._client._submit_job(
             'fba_tools.media_to_excel_file', [media],
             self._service_ver, context)

    def media_to_excel_file(self, media, context=None):
        """
        :param media: instance of type "MediaObjectSelectionParams" ->
           structure: parameter "workspace_name" of String, parameter
           "media_name" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._media_to_excel_file_submit(media, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_media_as_excel_file_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.export_media_as_excel_file', [params],
             self._service_ver, context)

    def export_media_as_excel_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_media_as_excel_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_media_as_tsv_file_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.export_media_as_tsv_file', [params],
             self._service_ver, context)

    def export_media_as_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_media_as_tsv_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _tsv_file_to_phenotype_set_submit(self, p, context=None):
        return self._client._submit_job(
             'fba_tools.tsv_file_to_phenotype_set', [p],
             self._service_ver, context)

    def tsv_file_to_phenotype_set(self, p, context=None):
        """
        :param p: instance of type "PhenotypeSetCreationParams" (******
           Phenotype Data Converters *******) -> structure: parameter
           "phenotype_set_file" of type "File" -> structure: parameter "path"
           of String, parameter "shock_id" of String, parameter
           "phenotype_set_name" of String, parameter "workspace_name" of
           String, parameter "genome" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._tsv_file_to_phenotype_set_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _phenotype_set_to_tsv_file_submit(self, phenotype_set, context=None):
        return self._client._submit_job(
             'fba_tools.phenotype_set_to_tsv_file', [phenotype_set],
             self._service_ver, context)

    def phenotype_set_to_tsv_file(self, phenotype_set, context=None):
        """
        :param phenotype_set: instance of type
           "PhenotypeSetObjectSelectionParams" -> structure: parameter
           "workspace_name" of String, parameter "phenotype_set_name" of
           String, parameter "save_to_shock" of type "boolean" (A boolean - 0
           for false, 1 for true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._phenotype_set_to_tsv_file_submit(phenotype_set, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_phenotype_set_as_tsv_file_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.export_phenotype_set_as_tsv_file', [params],
             self._service_ver, context)

    def export_phenotype_set_as_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_phenotype_set_as_tsv_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _phenotype_simulation_set_to_excel_file_submit(self, pss, context=None):
        return self._client._submit_job(
             'fba_tools.phenotype_simulation_set_to_excel_file', [pss],
             self._service_ver, context)

    def phenotype_simulation_set_to_excel_file(self, pss, context=None):
        """
        :param pss: instance of type
           "PhenotypeSimulationSetObjectSelectionParams" -> structure:
           parameter "workspace_name" of String, parameter
           "phenotype_simulation_set_name" of String, parameter
           "save_to_shock" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._phenotype_simulation_set_to_excel_file_submit(pss, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _phenotype_simulation_set_to_tsv_file_submit(self, pss, context=None):
        return self._client._submit_job(
             'fba_tools.phenotype_simulation_set_to_tsv_file', [pss],
             self._service_ver, context)

    def phenotype_simulation_set_to_tsv_file(self, pss, context=None):
        """
        :param pss: instance of type
           "PhenotypeSimulationSetObjectSelectionParams" -> structure:
           parameter "workspace_name" of String, parameter
           "phenotype_simulation_set_name" of String, parameter
           "save_to_shock" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._phenotype_simulation_set_to_tsv_file_submit(pss, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_phenotype_simulation_set_as_excel_file_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.export_phenotype_simulation_set_as_excel_file', [params],
             self._service_ver, context)

    def export_phenotype_simulation_set_as_excel_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_phenotype_simulation_set_as_excel_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_phenotype_simulation_set_as_tsv_file_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.export_phenotype_simulation_set_as_tsv_file', [params],
             self._service_ver, context)

    def export_phenotype_simulation_set_as_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_phenotype_simulation_set_as_tsv_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _bulk_export_objects_submit(self, params, context=None):
        return self._client._submit_job(
             'fba_tools.bulk_export_objects', [params],
             self._service_ver, context)

    def bulk_export_objects(self, params, context=None):
        """
        :param params: instance of type "BulkExportObjectsParams" ->
           structure: parameter "refs" of list of String, parameter
           "all_models" of type "bool" (A binary boolean), parameter
           "all_fba" of type "bool" (A binary boolean), parameter "all_media"
           of type "bool" (A binary boolean), parameter "all_phenotypes" of
           type "bool" (A binary boolean), parameter "all_phenosims" of type
           "bool" (A binary boolean), parameter "model_format" of String,
           parameter "fba_format" of String, parameter "media_format" of
           String, parameter "phenotype_format" of String, parameter
           "phenosim_format" of String
        :returns: instance of type "BulkExportObjectsResult" -> structure:
           parameter "report_name" of String, parameter "report_ref" of type
           "ws_report_id" (The workspace ID for a Report object @id ws
           KBaseReport.Report), parameter "ref" of String
        """
        job_id = self._bulk_export_objects_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def status(self, context=None):
        job_id = self._client._submit_job('fba_tools.status', 
            [], self._service_ver, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]
